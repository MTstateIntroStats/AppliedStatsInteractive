job_description <- c()
for(i in seq_along(links)) {
url <- paste0("https://www.indeed.com", links[i])
page <- read_html(url)
job_description[i] <- page %>%
html_nodes("div")  %>%
html_nodes(xpath = '//*[@class="jobsearch-jobDescriptionText"]') %>%
html_text() %>%
stri_trim_both()
}
df <- data.frame(job_title, company_name, job_location, job_description)
full_df <- rbind(full_df, df)
}
full_df
#####################################
##Analyze Descriptions
#####################################
Descriptions <- full_df %>%
unnest_tokens(word, job_description) %>%
filter(nchar(word) >= 3) %>%
anti_join(stop_words)
Descriptions %>%
group_by(word) %>%
summarize(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(25) %>%
ggplot() + geom_col(mapping = aes(x = Count, y = word)) + ggtitle("Counts of Words in Descriptions")
head(full_df)
full_df$id <- seq(1:nrow(full_df))
word_pairs <- full_df %>%
unnest_tokens(word, job_description) %>%
filter(nchar(word) >= 3) %>%
anti_join(stop_words) %>%
filter(!(word %in% c("skills", "skill", "experience"))) %>%
pairwise_count(text = word, id, sort = TRUE, upper = FALSE)
head(word_pairs)
#text_tokens(full_df$job_description, stemmer = "english")
word_pairs %>%
#filter(n >= 20) %>%
filter(n >= 50) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "cyan4") +
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE,
point.padding = unit(0.2, "lines")) +
#ggtitle("Skills Web for 'Mathematics' Jobs") +
ggtitle("Skills Web for 'Data Analytics' Jobs") +
theme_void()
rm(list = ls())
library(rvest)
library(tidyverse)
library(xml2)
library(stringi)
library(igraph)
library(ggraph)
library(tidytext)
library(widyr)
library(corpus)
library(SnowballC)
#Search indeed for Mathematics jobs near Manchester, NH
#url <- "https://www.indeed.com/jobs?q=mathematics&l=Manchester%2C%20NH"
#Search indeed for Data Analytics jobs near Boston, MA
url <- "https://www.indeed.com/jobs?q=data%20analytics&l=Boston%2C%20MA"
#Parse html
page <- read_html(url)
#Get job title
job_title <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@data-tn-element = "jobTitle"]') %>%
html_attr("title")
job_title
job_location <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@class = "location accessible-contrast-color-location"]') %>%
html_text() %>%
stri_trim_both()
company_name <- page %>%
html_nodes("span") %>%
html_nodes(xpath = '//*[@class = "company"]') %>%
html_text() %>%
stri_trim_both()
job_location
company_name
links <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@data-tn-element="jobTitle"]') %>%
html_attr("href")
links
job_description <- c()
for(i in seq_along(links)) {
url <- paste0("https://www.indeed.com", links[i])
page <- read_html(url)
job_description[[i]] <- page %>%
html_nodes("div")  %>%
html_nodes(xpath = '//*[@class="jobsearch-jobDescriptionText"]') %>%
html_text() %>%
stri_trim_both()
}
###########################
##Auto crawl pages
##Look at page urls for first and last value
###########################
page_result_start <- 10
#page_result_end <- 2820
#scrape only the most recent 100 postings.
page_result_end <- 80
page_results <- seq(from = page_result_start, to = page_result_end, by = 10)
full_df <- data.frame()
for(i in seq_along(page_results)) {
first_page_url <- "https://www.indeed.com/jobs?q=mathematics&l=Manchester%2C%20NH"
url <- paste0(first_page_url, "&start=", page_results[i])
page <- xml2::read_html(url)
# Sys.sleep pauses R for two seconds before it resumes
# Putting it there avoids error messages such as "Error in open.connection(con, "rb") : Timeout was reached"
Sys.sleep(2)
#get the job title
job_title <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@data-tn-element = "jobTitle"]') %>%
html_attr("title")
#get the company name
company_name <- page %>%
html_nodes("span")  %>%
html_nodes(xpath = '//*[@class="company"]')  %>%
html_text() %>%
stri_trim_both()
#get job location
job_location <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@class="location accessible-contrast-color-location"]')%>%
html_text() %>%
stri_trim_both()
# get links
links <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@data-tn-element="jobTitle"]') %>%
html_attr("href")
job_description <- c()
for(i in seq_along(links)) {
url <- paste0("https://www.indeed.com", links[i])
page <- read_html(url)
job_description[i] <- page %>%
html_nodes("div")  %>%
html_nodes(xpath = '//*[@class="jobsearch-jobDescriptionText"]') %>%
html_text() %>%
stri_trim_both()
}
df <- data.frame(job_title, company_name, job_location, job_description)
full_df <- rbind(full_df, df)
}
full_df
#####################################
##Analyze Descriptions
#####################################
Descriptions <- full_df %>%
unnest_tokens(word, job_description) %>%
filter(nchar(word) >= 3) %>%
anti_join(stop_words)
Descriptions %>%
group_by(word) %>%
summarize(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(25) %>%
ggplot() + geom_col(mapping = aes(x = Count, y = word)) + ggtitle("Counts of Words in Descriptions")
head(full_df)
full_df$id <- seq(1:nrow(full_df))
word_pairs <- full_df %>%
unnest_tokens(word, job_description) %>%
filter(nchar(word) >= 3) %>%
anti_join(stop_words) %>%
filter(!(word %in% c("skills", "skill", "experience"))) %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE)
head(word_pairs)
#text_tokens(full_df$job_description, stemmer = "english")
word_pairs %>%
#filter(n >= 20) %>%
filter(n >= 50) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "cyan4") +
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE,
point.padding = unit(0.2, "lines")) +
#ggtitle("Skills Web for 'Mathematics' Jobs") +
ggtitle("Skills Web for 'Data Analytics' Jobs") +
theme_void()
word_pairs %>%
#filter(n >= 20) %>%
filter(n >= 20) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "cyan4") +
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE,
point.padding = unit(0.2, "lines")) +
#ggtitle("Skills Web for 'Mathematics' Jobs") +
ggtitle("Skills Web for 'Data Analytics' Jobs") +
theme_void()
word_pairs %>%
#filter(n >= 20) %>%
filter(n >= 30) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "cyan4") +
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE,
point.padding = unit(0.2, "lines")) +
#ggtitle("Skills Web for 'Mathematics' Jobs") +
ggtitle("Skills Web for 'Data Analytics' Jobs") +
theme_void()
rm(list = ls())
1 - pnorm((15.5 - 15)/(1/sqrt(12)))
1 - pnorm((15.5 - 15)/(1/sqrt(10)))
1 - pnorm((15.25 - 15)/(1/sqrt(10)))
1 - pt((15.5 - 15)/(1/sqrt(10)), df = 11)
1 - pt((15.25 - 15)/(1/sqrt(10)), df = 11)
0.59 - (1.96*0.0348)
0.59 + (1.96*0.0348)
rm(list = ls())
rsconnect::setAccountInfo(name='agsnhu',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/6_NormalDistribution/6_NormalDistribution.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agsnhu',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/15_HTandCInum/15_HTandCInum.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agsnhu',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/3_DescriptiveNumCat/3_DescriptiveNumCat.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agmath',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/3_DescriptiveNumCat/3_DescriptiveNumCat.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agmath',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/15_HTandCInum/15_HTandCInum.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agmath',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/3_DescriptiveNumCat/3_DescriptiveNumCat.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agmath',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/3_DescriptiveNumCat/3_DescriptiveNumCat.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agmath',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/16_InferencePractice/16_InferencePractice.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agmath',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/16_InferencePractice/16_InferencePractice.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agsnhu',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/16_InferencePractice/16_InferencePractice.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agsnhu',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/16_InferencePractice/16_InferencePractice.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agmath',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/16_InferencePractice/16_InferencePractice.rmd")
rsconnect::accounts()
rsconnect::accounts()[1]
rsconnect::accounts()[, 1]
rsconnect::accounts()[1, ]
rsconnect::accounts() <- rsconnect::accounts()[1, ]
rsconnect::removeAccount()
rsconnect::removeAccount(name = "agsnhu")
rm(list = ls())
rsconnect::setAccountInfo(name='agmath',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/16_InferencePractice/16_InferencePractice.rmd")
rm(list = ls())
rsconnect::setAccountInfo(name='agmath',
token='DCCB9B96A5441B7E04DAAEB5704CBCE8',
secret='4fyYD49Ft//cJVd6fFYzEFfm8yf84cuPJ2EoSmYH')
library(rsconnect)
#rsconnect::deployApp("C:/Users/agilb/Google Drive/Annual Plans/SummerGrantProposal2020.rmd")
#rsconnect::deployApp("C:/Users/agilb/Google Drive/BIG Problems/SNHU GEM Project/GilbertAttempt/InteractiveLeafletMap.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/11_HTandCIprop/11_HTandCIprop.rmd")
setwd("C:/Users/agilb/Desktop/Data Science/ReachingHigherNH/FundingPerceptionSurvey")
responses <- read.csv("FundPerceptionCleaned.csv")
class(responses$Hsgrads_myTown_InformedCitizens)
2020 + 1040 + 398
202 + 1040 + 398
1000/1640
(1000/1640)*202
(1000/1640)*1040
(1000/1640)*398
130 + 635 + 243
130 + 584 + 243
130 + 584 + 243 + 43
.898+0.018+0.040+0.043
.898+0.018+0.040+0.044
pchisq(19484.62, df = 3)
1 - pchisq(19484.62, df = 3)
abs((1 - pchisq(19484.62, df = 3)) - 0) < 0.0001
2500*0.16*0.84
2500*0.35*0.84
2500*0.38*0.84
2500*0.11*0.84
2500*0.16*0.16
2500*0.38*0.16
2500*0.35*0.16
2500*0.1*0.16
2500*0.11*0.16
incomeLevel <- sample(c("Poverty", "LowIncome", "MiddleIncome", "HighIncome"), size = 2500, replace = TRUE, prob = c(0.16, 0.38, 0.35, 0.11))
BRFSSsim <- data.frame("IncomeLevel" = incomeLevel, "DrugUse" = rep(NA, length(incomeLevel)))
BRFSSsim$DrugUse[BRFSSsim$IncomeLevel == "Poverty"] <- sample(c("no", "yes"), size = len(incomeLevel[incomeLevel == "Poverty"]), replace = TRUE, prob = c(0.8, 0.2))
incomeLevel <- sample(c("Poverty", "LowIncome", "MiddleIncome", "HighIncome"), size = 2500, replace = TRUE, prob = c(0.16, 0.38, 0.35, 0.11))
BRFSSsim <- data.frame("IncomeLevel" = incomeLevel, "DrugUse" = rep(NA, length(incomeLevel)))
BRFSSsim$DrugUse[BRFSSsim$IncomeLevel == "Poverty"] <- sample(c("no", "yes"), size = length(incomeLevel[incomeLevel == "Poverty"]), replace = TRUE, prob = c(0.8, 0.2))
BRFSSsim$DrugUse[BRFSSsim$IncomeLevel == "LowIncome"] <- sample(c("no", "yes"), size = length(incomeLevel[incomeLevel == "LowIncome"]), replace = TRUE, prob = c(0.84, 0.16))
BRFSSsim$DrugUse[BRFSSsim$IncomeLevel == "MiddleIncome"] <- sample(c("no", "yes"), size = length(incomeLevel[incomeLevel == "MiddleIncome"]), replace = TRUE, prob = c(0.88, 0.12))
BRFSSsim$DrugUse[BRFSSsim$IncomeLevel == "HighIncome"] <- sample(c("no", "yes"), size = length(incomeLevel[incomeLevel == "HighIncome"]), replace = TRUE, prob = c(0.82, 0.18))
table(BRFSSsim$DrugUse, BRFSSsim$IncomeLevel)
table(BRFSSsim$DrugUse, BRFSSsim$IncomeLevel)[4. 2]
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/11_HTandCIprop/11_HTandCIprop.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/3_DescriptiveNumCat/3_DescriptiveNumCat.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/4_DataViz/4_DataViz.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/4_DataViz/4_DataViz.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/5_DiscreteDistributions/5_DiscreteDistributions.rmd")
rsconnect::deployApp("C:/Users/agilb/Documents/GitHub/SNHUmat241interactive/inst/tutorials/7_DiscreteDistributionsLab/7_DiscreteDistributionsLab.rmd")
remotes::install_github("rstudio/learnr")
remotes::install_github("rstudio/learnr")
remotes::install_github("rstudio/learnr")
sessioninfo::session_info()()
sessioninfo::session_info()
install.packages("rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
remotes::install_github("agmath/AppliedStatsInteractive")
remotes::install_github("agmath/AppliedStatsInteractive")
learnr::run_tutorial("2_IntroToR", package = "AppliedStatsInteractive")
library(tidyverse)
data <- read.csv("https://raw.githubusercontent.com/rajeevratan84/datascienceforbusiness/master/insurance.csv")
train_ind <- sample(1:nrow(data), size = 0.75*nrow(data), replace = FALSE)
train <- data[train_ind, ]
test <- data[-train_ind, ]
m1 <- lm(charges ~ ., data = train)
m1 <- lm(charges ~ . + poly(age, bmi, degree = 3, raw = TRUE), data = train)
m1 <- lm(charges ~ ., data = train)
m2 <- lm(charges ~ . + poly(age, bmi, degree = 3, raw = TRUE), data = train)
sqrt(sum((train$charges - predict(m1, newdata = train))^2)/nrow(train))
sqrt(sum((test$charges - predict(m1, newdata = test))^2)/nrow(test))
sqrt(sum((train$charges - predict(m2, newdata = train))^2)/nrow(train))
sqrt(sum((test$charges - predict(m2, newdata = test))^2)/nrow(test))
remotes::install_github("agmath/AppliedStatsInteractive")
remotes::install_github("agsnhu/AppliedStatsInteractive")
remotes::install_github("agmath/AppliedStatsInteractive")
sessioninfo::session_info()()
sessioninfo::session_info()
Sys.time()
as.numeric(Sys.time())
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -2)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
round(as.numeric(Sys.time()), -1)
library(AppliedStatsInteractive)
library(AppliedStatsInteractive)
2500*0.16*0.14
2500*0.16*0.86
2500*0.38*0.86
2500*0.35*0.86
2500*0.11*0.86
2500*0.16*0.14
2500*0.35*0.14
2500*0.38*0.14
2500*0.11*0.14
library(AppliedStatsInteractive)
library(AppliedStatsInteractive)
library(AppliedStatsInteractive)
library(AppliedStatsInteractive)
learnr::run_tutorial("14_ChiSquare", package = "AppliedStatsInteractive")
